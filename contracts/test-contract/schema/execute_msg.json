{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "desmos_messages"
      ],
      "properties": {
        "desmos_messages": {
          "type": "object",
          "required": [
            "msgs"
          ],
          "properties": {
            "msgs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CosmosMsg_for_DesmosMsg"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Address": {
      "description": "Contains the data of the external chain address to be connected with the Desmos profile.",
      "type": "object",
      "required": [
        "@type",
        "value"
      ],
      "properties": {
        "@type": {
          "description": "The address proto type.",
          "type": "string"
        },
        "prefix": {
          "description": "Optional address prefix when `proto_type` is Bech32 or Hex.",
          "type": [
            "string",
            "null"
          ]
        },
        "value": {
          "description": "The encoded address.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "AnswerResult": {
      "description": "Contains the result of a single poll provided answer.",
      "type": "object",
      "required": [
        "answer_index",
        "votes"
      ],
      "properties": {
        "answer_index": {
          "description": "Index of the answer inside the [`PostAttachment::Poll::provided_answers`].",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "votes": {
          "description": "Number of votes the answer has received.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Attachment": {
      "description": "Contains the data of a single post attachment.",
      "type": "object",
      "required": [
        "content",
        "id",
        "post_id",
        "subspace_id"
      ],
      "properties": {
        "content": {
          "description": "Content of the attachment.",
          "allOf": [
            {
              "$ref": "#/definitions/RawPostAttachment"
            }
          ]
        },
        "id": {
          "description": "Id of this attachment.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "post_id": {
          "description": "Id of the post to which this attachment should be connected.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "subspace_id": {
          "description": "Id of the subspace inside which the post to which this attachment should be connected is.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "BankMsg": {
      "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
      "oneOf": [
        {
          "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28). `from_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "send"
          ],
          "properties": {
            "send": {
              "type": "object",
              "required": [
                "amount",
                "to_address"
              ],
              "properties": {
                "amount": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "to_address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This will burn the given coins from the contract's account. There is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper. Important if a contract controls significant token supply that must be retired.",
          "type": "object",
          "required": [
            "burn"
          ],
          "properties": {
            "burn": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "ChainConfig": {
      "description": "Contains the data of the linked chain.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the chain.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CosmosMsg_for_DesmosMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "bank"
          ],
          "properties": {
            "bank": {
              "$ref": "#/definitions/BankMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "$ref": "#/definitions/DesmosMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "staking"
          ],
          "properties": {
            "staking": {
              "$ref": "#/definitions/StakingMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "distribution"
          ],
          "properties": {
            "distribution": {
              "$ref": "#/definitions/DistributionMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "wasm"
          ],
          "properties": {
            "wasm": {
              "$ref": "#/definitions/WasmMsg"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Data": {
      "description": "Represents the data associated to a specific user of a generic centralized application.",
      "type": "object",
      "required": [
        "application",
        "username"
      ],
      "properties": {
        "application": {
          "description": "The application name (eg. Twitter, GitHub, etc).",
          "type": "string"
        },
        "username": {
          "description": "Username on the application (eg. Twitter tag, GitHub profile, etc).",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "DesmosMsg": {
      "description": "Enum that defines how the messages are serialized.",
      "oneOf": [
        {
          "description": "Messages relative to the x/profiles module.",
          "type": "object",
          "required": [
            "profiles"
          ],
          "properties": {
            "profiles": {
              "$ref": "#/definitions/ProfilesMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Messages relative to the x/subspaces module.",
          "type": "object",
          "required": [
            "subspaces"
          ],
          "properties": {
            "subspaces": {
              "$ref": "#/definitions/SubspacesMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Messages relative to the x/relationships module.",
          "type": "object",
          "required": [
            "relationships"
          ],
          "properties": {
            "relationships": {
              "$ref": "#/definitions/RelationshipsMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Messages relative to the x/posts module.",
          "type": "object",
          "required": [
            "posts"
          ],
          "properties": {
            "posts": {
              "$ref": "#/definitions/PostsMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Messages relative to the x/reactions module.",
          "type": "object",
          "required": [
            "reactions"
          ],
          "properties": {
            "reactions": {
              "$ref": "#/definitions/ReactionsMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Messages relative to the x/reports module.",
          "type": "object",
          "required": [
            "reports"
          ],
          "properties": {
            "reports": {
              "$ref": "#/definitions/ReportsMsg"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DistributionMsg": {
      "description": "The message types of the distribution module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto",
      "oneOf": [
        {
          "description": "This is translated to a [MsgSetWithdrawAddress](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L29-L37). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "set_withdraw_address"
          ],
          "properties": {
            "set_withdraw_address": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "description": "The `withdraw_address`",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This is translated to a [[MsgWithdrawDelegatorReward](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L42-L50). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "withdraw_delegator_reward"
          ],
          "properties": {
            "withdraw_delegator_reward": {
              "type": "object",
              "required": [
                "validator"
              ],
              "properties": {
                "validator": {
                  "description": "The `validator_address`",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Entities": {
      "description": "Contains the details of entities parsed out of the post text.",
      "type": "object",
      "required": [
        "hashtags",
        "mentions",
        "urls"
      ],
      "properties": {
        "hashtags": {
          "description": "Hashtag entities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextTagEntity"
          }
        },
        "mentions": {
          "description": "Mention entities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextTagEntity"
          }
        },
        "urls": {
          "description": "Url entities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UrlEntity"
          }
        }
      },
      "additionalProperties": false
    },
    "FreeTextValueParams": {
      "description": "Contains the params for [`ReactionValue::FreeText`] based reactions.",
      "type": "object",
      "required": [
        "enabled",
        "max_length",
        "reg_ex"
      ],
      "properties": {
        "enabled": {
          "description": "Whether [`ReactionValue::FreeText`] reactions should be enabled.",
          "type": "boolean"
        },
        "max_length": {
          "description": "The max length that [`ReactionValue::FreeText`] reactions should have.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "reg_ex": {
          "description": "RegEx that each [`ReactionValue::FreeText`] should respect. This is useful to limit what characters can be used as a reaction.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Height": {
      "description": "Represents a chain block height. Normally the `revision_height` is incremented at each height while keeping `revision_number` the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes in these cases, the `revision_number` is incremented so that height continues to be monitonically increasing even as the `revision_height` gets reset.",
      "type": "object",
      "required": [
        "revision_height",
        "revision_number"
      ],
      "properties": {
        "revision_height": {
          "description": "The height within the given revision.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "revision_number": {
          "description": "The revision that the client is currently on.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Permission": {
      "description": "Represents the permissions that can be given to an user or a user group.",
      "oneOf": [
        {
          "description": "Allows to change the information of the subspace.",
          "type": "string",
          "enum": [
            "EDIT_SUBSPACE"
          ]
        },
        {
          "description": "Allows users to delete the subspace.",
          "type": "string",
          "enum": [
            "DELETE_SUBSPACE"
          ]
        },
        {
          "description": "Allows users to manage a subspace sections.",
          "type": "string",
          "enum": [
            "MANAGE_SECTIONS"
          ]
        },
        {
          "description": "Allows users to manage user groups and members.",
          "type": "string",
          "enum": [
            "MANAGE_GROUPS"
          ]
        },
        {
          "description": "Allows users to set other users' permissions (except [`Permission::`SetPermissions`]). This includes managing user groups and the associated permissions.",
          "type": "string",
          "enum": [
            "SET_PERMISSIONS"
          ]
        },
        {
          "description": "Allows to do everything. This should usually be reserved only to the owner (which has it by default).",
          "type": "string",
          "enum": [
            "EVERYTHING"
          ]
        },
        {
          "description": "Identifies users that can create content inside the subspace.",
          "type": "string",
          "enum": [
            "WRITE_CONTENT"
          ]
        },
        {
          "description": "Allows users to interact with content inside the subspace (eg. polls).",
          "type": "string",
          "enum": [
            "INTERACT_WITH_CONTENT"
          ]
        },
        {
          "description": "Allows users to edit their own content inside the subspace.",
          "type": "string",
          "enum": [
            "EDIT_OWN_CONTENT"
          ]
        },
        {
          "description": "Allows users to moderate other user's content.",
          "type": "string",
          "enum": [
            "MODERATE_CONTENT"
          ]
        }
      ]
    },
    "PollTallyResults": {
      "description": "Contains the tally results for a [`PostAttachment::Poll`].",
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "Lists of votes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnswerResult"
          }
        }
      },
      "additionalProperties": false
    },
    "PostReference": {
      "description": "Contains the details of a post reference.",
      "type": "object",
      "required": [
        "post_id",
        "type"
      ],
      "properties": {
        "position": {
          "description": "Position of the reference inside the post's text. This should be used only with the type set to ['PostReferenceType::Quote']",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint64"
            },
            {
              "type": "null"
            }
          ]
        },
        "post_id": {
          "description": "Id of the referenced post.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "type": {
          "description": "Type of reference.",
          "allOf": [
            {
              "$ref": "#/definitions/PostReferenceType"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PostReferenceType": {
      "description": "Represents the different types of [`PostReference`].",
      "oneOf": [
        {
          "description": "No reference specified.",
          "type": "string",
          "enum": [
            "POST_REFERENCE_TYPE_UNSPECIFIED"
          ]
        },
        {
          "description": "Represents a reply to the specified post.",
          "type": "string",
          "enum": [
            "POST_REFERENCE_TYPE_REPLY"
          ]
        },
        {
          "description": "Represents a quote of the specified post.",
          "type": "string",
          "enum": [
            "POST_REFERENCE_TYPE_QUOTE"
          ]
        },
        {
          "description": "Represents a repost of the specified post.",
          "type": "string",
          "enum": [
            "POST_REFERENCE_TYPE_REPOST"
          ]
        }
      ]
    },
    "PostsMsg": {
      "description": "Represents the messages to interact with the posts module.",
      "oneOf": [
        {
          "description": "Represents the message to be used to create a post.",
          "type": "object",
          "required": [
            "create_post"
          ],
          "properties": {
            "create_post": {
              "type": "object",
              "required": [
                "author",
                "referenced_posts",
                "reply_settings",
                "section_id",
                "subspace_id"
              ],
              "properties": {
                "attachments": {
                  "description": "Attachments of the post.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/RawPostAttachment"
                  }
                },
                "author": {
                  "description": "Author of the post.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "conversation_id": {
                  "description": "Id of the original post of the conversation.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "entities": {
                  "description": "Entities connected to this post.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Entities"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "external_id": {
                  "description": "External id for this post.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "referenced_posts": {
                  "description": "A list this posts references (either as a reply, repost or quote).",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PostReference"
                  }
                },
                "reply_settings": {
                  "description": "Reply settings of this post.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/ReplySetting"
                    }
                  ]
                },
                "section_id": {
                  "description": "Id of the section inside which the post must be created.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "subspace_id": {
                  "description": "Id of the subspace inside which the post must be created.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "text": {
                  "description": "Text of the post.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Represents the message to be used to edit a post.",
          "type": "object",
          "required": [
            "edit_post"
          ],
          "properties": {
            "edit_post": {
              "type": "object",
              "required": [
                "editor",
                "post_id",
                "subspace_id",
                "text"
              ],
              "properties": {
                "editor": {
                  "description": "Editor of the post.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "entities": {
                  "description": "New entities connected to this post. These will always replace the current post's entities.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Entities"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "post_id": {
                  "description": "Id of the post to edit.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace inside which the post is.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "text": {
                  "description": "New text of the post. If set to `[do-not-modify]` it will not change the current post's text.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Represents the message used when deleting a post.",
          "type": "object",
          "required": [
            "delete_post"
          ],
          "properties": {
            "delete_post": {
              "type": "object",
              "required": [
                "post_id",
                "signer",
                "subspace_id"
              ],
              "properties": {
                "post_id": {
                  "description": "Id of the post to be deleted.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "signer": {
                  "description": "User that is deleting the post.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace containing the post.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Represents the message that should be used when adding an attachment to post.",
          "type": "object",
          "required": [
            "add_post_attachment"
          ],
          "properties": {
            "add_post_attachment": {
              "type": "object",
              "required": [
                "content",
                "editor",
                "post_id",
                "subspace_id"
              ],
              "properties": {
                "content": {
                  "description": "Content of the attachment.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RawPostAttachment"
                    }
                  ]
                },
                "editor": {
                  "description": "Editor of the post.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "post_id": {
                  "description": "Id of the post to which to add the attachment.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace containing the post.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Represents the message to be used when removing an attachment from a post.",
          "type": "object",
          "required": [
            "remove_post_attachment"
          ],
          "properties": {
            "remove_post_attachment": {
              "type": "object",
              "required": [
                "attachment_id",
                "editor",
                "post_id",
                "subspace_id"
              ],
              "properties": {
                "attachment_id": {
                  "description": "Id of the attachment to be removed.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "editor": {
                  "description": "User that is removing the attachment.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "post_id": {
                  "description": "Id of the post from which to remove the attachment.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace containing the post.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Represents the message used to answer a poll.",
          "type": "object",
          "required": [
            "answer_poll"
          ],
          "properties": {
            "answer_poll": {
              "type": "object",
              "required": [
                "answers_indexes",
                "poll_id",
                "post_id",
                "signer",
                "subspace_id"
              ],
              "properties": {
                "answers_indexes": {
                  "description": "Indexes of the answer inside the ProvidedAnswers array.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "poll_id": {
                  "description": "Id of the poll to be answered.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "post_id": {
                  "description": "Id of the post that contains the poll to be answered.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "signer": {
                  "description": "Address of the user answering the poll.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace containing the post.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ProfilesMsg": {
      "description": "Represents the messages to interact with the profiles module.",
      "oneOf": [
        {
          "description": "Saves a Desmos profile.",
          "type": "object",
          "required": [
            "save_profile"
          ],
          "properties": {
            "save_profile": {
              "type": "object",
              "required": [
                "bio",
                "cover_picture",
                "creator",
                "dtag",
                "nickname",
                "profile_picture"
              ],
              "properties": {
                "bio": {
                  "description": "Biography of the profile.",
                  "type": "string"
                },
                "cover_picture": {
                  "description": "URL to the cover cover picture.",
                  "type": "string"
                },
                "creator": {
                  "description": "Address of which is creating the profile.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "dtag": {
                  "description": "Unique profile tag.",
                  "type": "string"
                },
                "nickname": {
                  "description": "Human readable name of the profile.",
                  "type": "string"
                },
                "profile_picture": {
                  "description": "URL to the profile picture.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Deletes a profile.",
          "type": "object",
          "required": [
            "delete_profile"
          ],
          "properties": {
            "delete_profile": {
              "type": "object",
              "required": [
                "creator"
              ],
              "properties": {
                "creator": {
                  "description": "Address of the profile to delete.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Requests a dtag transfer between the sender and the receiver.",
          "type": "object",
          "required": [
            "request_dtag_transfer"
          ],
          "properties": {
            "request_dtag_transfer": {
              "type": "object",
              "required": [
                "receiver",
                "sender"
              ],
              "properties": {
                "receiver": {
                  "description": "Address of who is going to receive the DTag.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "sender": {
                  "description": "Address of who is going to send the DTag.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Accepts an incoming DTag transfer.",
          "type": "object",
          "required": [
            "accept_dtag_transfer_request"
          ],
          "properties": {
            "accept_dtag_transfer_request": {
              "type": "object",
              "required": [
                "new_dtag",
                "receiver",
                "sender"
              ],
              "properties": {
                "new_dtag": {
                  "description": "The DTag to accept.",
                  "type": "string"
                },
                "receiver": {
                  "description": "Address of who is receiving the DTag.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "sender": {
                  "description": "Address of who has sent the DTag.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Refuses a DTag transfer.",
          "type": "object",
          "required": [
            "refuse_dtag_transfer_request"
          ],
          "properties": {
            "refuse_dtag_transfer_request": {
              "type": "object",
              "required": [
                "receiver",
                "sender"
              ],
              "properties": {
                "receiver": {
                  "description": "Address of who was supposed to receive the DTag.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "sender": {
                  "description": "Address of who has started the DTag transfer.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Cancel a pending DTag transfer request.",
          "type": "object",
          "required": [
            "cancel_dtag_transfer_request"
          ],
          "properties": {
            "cancel_dtag_transfer_request": {
              "type": "object",
              "required": [
                "receiver",
                "sender"
              ],
              "properties": {
                "receiver": {
                  "description": "Address of who has started the DTag transfer.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "sender": {
                  "description": "Address of who was supposed to receive the DTag.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Links an external chain address to a profile.",
          "type": "object",
          "required": [
            "link_chain_account"
          ],
          "properties": {
            "link_chain_account": {
              "type": "object",
              "required": [
                "chain_address",
                "chain_config",
                "proof",
                "signer"
              ],
              "properties": {
                "chain_address": {
                  "description": "Data of the external chain address to be connected with the Desmos profile.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Address"
                    }
                  ]
                },
                "chain_config": {
                  "description": "Contains the configuration of the external chain.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/ChainConfig"
                    }
                  ]
                },
                "proof": {
                  "description": "Contains the ownership proof of the external chain address.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Proof"
                    }
                  ]
                },
                "signer": {
                  "description": "Address associated with the profile to which link the external account.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Unlink an external account from a profile.",
          "type": "object",
          "required": [
            "unlink_chain_account"
          ],
          "properties": {
            "unlink_chain_account": {
              "type": "object",
              "required": [
                "chain_name",
                "owner",
                "target"
              ],
              "properties": {
                "chain_name": {
                  "description": "The chain name associated with the link to be removed",
                  "type": "string"
                },
                "owner": {
                  "description": "The profile address from which to remove the link.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "target": {
                  "description": "The external address to be removed.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Set an external address as a default one.",
          "type": "object",
          "required": [
            "set_default_external_address"
          ],
          "properties": {
            "set_default_external_address": {
              "type": "object",
              "required": [
                "chain_name",
                "signer",
                "target"
              ],
              "properties": {
                "chain_name": {
                  "description": "Name of the chain for which to set the default address",
                  "type": "string"
                },
                "signer": {
                  "description": "User address signing the message.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "target": {
                  "description": "Address to be set as the default one.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Connects a profile with a centralized application account (eg. Twitter, GitHub, etc).",
          "type": "object",
          "required": [
            "link_application"
          ],
          "properties": {
            "link_application": {
              "type": "object",
              "required": [
                "call_data",
                "link_data",
                "sender",
                "source_channel",
                "source_port",
                "timeout_height",
                "timeout_timestamp"
              ],
              "properties": {
                "call_data": {
                  "description": "Hex encoded call data that will be sent to the data source in order to verify the link.",
                  "type": "string"
                },
                "link_data": {
                  "description": "The data related to the application to which connect.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Data"
                    }
                  ]
                },
                "sender": {
                  "description": "Sender of the connection request.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "source_channel": {
                  "description": "The channel by which the packet will be sent.",
                  "type": "string"
                },
                "source_port": {
                  "description": "The port on which the packet will be sent.",
                  "type": "string"
                },
                "timeout_height": {
                  "description": "Timeout height relative to the current block height. The timeout is disabled when set to 0.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Height"
                    }
                  ]
                },
                "timeout_timestamp": {
                  "description": "Timeout timestamp (in nanoseconds) relative to the current block timestamp. The timeout is disabled when set to 0.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Unlink a centralized application account from the profile.",
          "type": "object",
          "required": [
            "unlink_application"
          ],
          "properties": {
            "unlink_application": {
              "type": "object",
              "required": [
                "application",
                "signer",
                "username"
              ],
              "properties": {
                "application": {
                  "description": "The name of the application to unlink.",
                  "type": "string"
                },
                "signer": {
                  "description": "The Desmos account from which the application should be unlinked.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "username": {
                  "description": "The username inside the application to unlink.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Proof": {
      "description": "Contains all the data used to verify a signature when linking an account to a profile.",
      "type": "object",
      "required": [
        "plain_text",
        "pub_key",
        "signature"
      ],
      "properties": {
        "plain_text": {
          "description": "represents the hex-encoded value signed in order to produce the `signature`.",
          "type": "string"
        },
        "pub_key": {
          "description": "Represents the public key associated with the address for which to prove the ownership.",
          "allOf": [
            {
              "$ref": "#/definitions/PubKey"
            }
          ]
        },
        "signature": {
          "description": "Represents the hex-encoded signature of the `plain_text` value.",
          "allOf": [
            {
              "$ref": "#/definitions/Signature"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ProvidedAnswer": {
      "description": "Contains the details of a possible poll answer",
      "type": "object",
      "required": [
        "attachments"
      ],
      "properties": {
        "attachments": {
          "description": "Attachments of the answer.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "text": {
          "description": "Text of the answer.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "PubKey": {
      "description": "Represents a generic public key.",
      "type": "object",
      "required": [
        "@type",
        "key"
      ],
      "properties": {
        "@type": {
          "description": "Public key type.",
          "type": "string"
        },
        "key": {
          "description": "Base64 encoded public key.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RawPostAttachment": {
      "description": "Struct representing a generic post attachment that can be serialized and sent to the chain. This struct can be created converting a [`PostAttachment`] using the [`core::convert::Into`] trait.",
      "type": "object",
      "required": [
        "@type"
      ],
      "properties": {
        "@type": {
          "description": "Attachment uri type, can be: * `/desmos.post.v1.Media` if representing a media. * `/desmos.post.v1.Poll` if representing a poll.",
          "type": "string"
        },
        "allows_answer_edits": {
          "description": "Whether the poll allows to edit an answer or not.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "allows_multiple_answers": {
          "description": "Whether the poll allows multiple choices from the same user or not.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "end_date": {
          "description": "Date at which the poll will close in RFC 3339 format. example: 1972-01-01T10:00:20.",
          "type": [
            "string",
            "null"
          ]
        },
        "final_tally_results": {
          "description": "Final poll results.",
          "anyOf": [
            {
              "$ref": "#/definitions/PollTallyResults"
            },
            {
              "type": "null"
            }
          ]
        },
        "mime_type": {
          "description": "Mime type if the post attachment is a media.",
          "type": [
            "string",
            "null"
          ]
        },
        "provided_answers": {
          "description": "Answers the users can choose from.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/ProvidedAnswer"
          }
        },
        "question": {
          "description": "Question of the poll.",
          "type": [
            "string",
            "null"
          ]
        },
        "uri": {
          "description": "Uri where can be found the media.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "RawReactionValue": {
      "description": "Struct representing a generic reaction value that can be serialized and sent to the chain. This struct can be created converting a [`ReactionValue`] using the [`core::convert::Into`] trait.",
      "type": "object",
      "required": [
        "@type"
      ],
      "properties": {
        "@type": {
          "description": "ReactionValue uri type, can be: * `/desmos.reactions.v1.RegisteredReactionValue` if representing a registered reaction. * `/desmos.reactions.v1.FreeTextValue` if representing a free text reaction.",
          "type": "string"
        },
        "registered_reaction_id": {
          "description": "Represents the id of registered reaction if it is registered reaction reaction.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "text": {
          "description": "Represents the text of reaction if it is free text reaction.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "RawReportTarget": {
      "description": "Serializable representation of [`ReportTarget`]. To create an instance of this struct use the `into()` method of [`ReportTarget`]",
      "type": "object",
      "required": [
        "@type"
      ],
      "properties": {
        "@type": {
          "type": "string"
        },
        "post_id": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint64"
            },
            {
              "type": "null"
            }
          ]
        },
        "user": {
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ReactionsMsg": {
      "description": "Represents the messages to interact with the reactions module.",
      "oneOf": [
        {
          "description": "Add a reaction to a post.",
          "type": "object",
          "required": [
            "add_reaction"
          ],
          "properties": {
            "add_reaction": {
              "type": "object",
              "required": [
                "post_id",
                "subspace_id",
                "user",
                "value"
              ],
              "properties": {
                "post_id": {
                  "description": "Id of the post to react to.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace inside which the post to react to is.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "user": {
                  "description": "User reacting to the post.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "value": {
                  "description": "Value of the reaction.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RawReactionValue"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Remove a reaction from a post.",
          "type": "object",
          "required": [
            "remove_reaction"
          ],
          "properties": {
            "remove_reaction": {
              "type": "object",
              "required": [
                "post_id",
                "reaction_id",
                "subspace_id",
                "user"
              ],
              "properties": {
                "post_id": {
                  "description": "Id of the post from which to remove the reaction.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "reaction_id": {
                  "description": "Id of the reaction to be removed.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "subspace_id": {
                  "description": "Id of the subspace inside which the reaction to remove is.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "user": {
                  "description": "User removing the reaction.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Register a new supported reaction to the subspace.",
          "type": "object",
          "required": [
            "add_registered_reaction"
          ],
          "properties": {
            "add_registered_reaction": {
              "type": "object",
              "required": [
                "display_value",
                "shorthand_code",
                "subspace_id",
                "user"
              ],
              "properties": {
                "display_value": {
                  "description": "Display value of the reaction.",
                  "type": "string"
                },
                "shorthand_code": {
                  "description": "Shorthand code of the reaction.",
                  "type": "string"
                },
                "subspace_id": {
                  "description": "Id of the subspace inside which this reaction should be registered.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "user": {
                  "description": "User adding the supported reaction.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Edit a registered reaction inside the subspace.",
          "type": "object",
          "required": [
            "edit_registered_reaction"
          ],
          "properties": {
            "edit_registered_reaction": {
              "type": "object",
              "required": [
                "display_value",
                "registered_reaction_id",
                "shorthand_code",
                "subspace_id",
                "user"
              ],
              "properties": {
                "display_value": {
                  "description": "Display value to be set.",
                  "type": "string"
                },
                "registered_reaction_id": {
                  "description": "Id of the registered reaction to edit.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "shorthand_code": {
                  "description": "New shorthand code to be set.",
                  "type": "string"
                },
                "subspace_id": {
                  "description": "Id of the subspace inside which the reaction to edit is.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "user": {
                  "description": "User editing the registered reaction.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Remove a registered reaction from the subspace.",
          "type": "object",
          "required": [
            "remove_registered_reaction"
          ],
          "properties": {
            "remove_registered_reaction": {
              "type": "object",
              "required": [
                "registered_reaction_id",
                "subspace_id",
                "user"
              ],
              "properties": {
                "registered_reaction_id": {
                  "description": "Id of the registered reaction to be removed.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "subspace_id": {
                  "description": "Id of the subspace from which to remove the registered reaction.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "user": {
                  "description": "User removing the registered reaction.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Set reactions parameters for the subspace.",
          "type": "object",
          "required": [
            "set_reactions_params"
          ],
          "properties": {
            "set_reactions_params": {
              "type": "object",
              "required": [
                "free_text",
                "registered_reaction",
                "subspace_id",
                "user"
              ],
              "properties": {
                "free_text": {
                  "description": "Params related to [`ReactionValue::FreeText`](crate::reactions::models::ReactionValue::FreeText) reactions.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/FreeTextValueParams"
                    }
                  ]
                },
                "registered_reaction": {
                  "description": "Params related to [`ReactionValue::Registered`](crate::reactions::models::ReactionValue::Registered) reactions.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RegisteredReactionValueParams"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace for which to set the params.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "user": {
                  "description": "User setting the params.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RegisteredReactionValueParams": {
      "description": "Contains the params for [`ReactionValue::Registered`] based reactions.",
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "description": "Whether [`ReactionValue::Registered`] reactions should be enabled.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "RelationshipsMsg": {
      "description": "Represents the messages to interact with x/relatioships module.",
      "oneOf": [
        {
          "description": "Message to create a new relationship.",
          "type": "object",
          "required": [
            "create_relationship"
          ],
          "properties": {
            "create_relationship": {
              "type": "object",
              "required": [
                "counterparty",
                "signer",
                "subspace_id"
              ],
              "properties": {
                "counterparty": {
                  "description": "Address of the counterparty.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "signer": {
                  "description": "Address of who wants to create the relationship.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Subspace in which will be created the relationship.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to delete a relationship.",
          "type": "object",
          "required": [
            "delete_relationship"
          ],
          "properties": {
            "delete_relationship": {
              "type": "object",
              "required": [
                "counterparty",
                "signer",
                "subspace_id"
              ],
              "properties": {
                "counterparty": {
                  "description": "Address of the counterparty.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "signer": {
                  "description": "Address of who wants to delete the relationship.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Subspace in which will be deleted the relationship.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to block another user.",
          "type": "object",
          "required": [
            "block_user"
          ],
          "properties": {
            "block_user": {
              "type": "object",
              "required": [
                "blocked",
                "blocker",
                "reason",
                "subspace_id"
              ],
              "properties": {
                "blocked": {
                  "description": "Address of the user that will be blocked from `blocker`.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "blocker": {
                  "description": "Address of who is creating the block.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "reason": {
                  "description": "Block reason.",
                  "type": "string"
                },
                "subspace_id": {
                  "description": "Subspace in which will be created the block.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to delete a previously created block.",
          "type": "object",
          "required": [
            "unblock_user"
          ],
          "properties": {
            "unblock_user": {
              "type": "object",
              "required": [
                "blocked",
                "blocker",
                "subspace_id"
              ],
              "properties": {
                "blocked": {
                  "description": "Address of the user that will be unblocked from `blocker`.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "blocker": {
                  "description": "Address of who wants to remove the block.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Subspace in which will be deleted the block.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ReplySetting": {
      "description": "Contains the possible reply settings that a post can have.",
      "oneOf": [
        {
          "description": "No reply setting specified.",
          "type": "string",
          "enum": [
            "REPLY_SETTING_UNSPECIFIED"
          ]
        },
        {
          "description": "Everyone will be able to reply to this post.",
          "type": "string",
          "enum": [
            "REPLY_SETTING_EVERYONE"
          ]
        },
        {
          "description": "Only followers of the author will be able to reply to this post.",
          "type": "string",
          "enum": [
            "REPLY_SETTING_FOLLOWERS"
          ]
        },
        {
          "description": "Only the author mutual followers will be able to reply to this post.",
          "type": "string",
          "enum": [
            "REPLY_SETTING_MUTUAL"
          ]
        },
        {
          "description": "Only people mentioned inside this post will be able to reply.",
          "type": "string",
          "enum": [
            "REPLY_SETTING_MENTIONS"
          ]
        }
      ]
    },
    "ReportsMsg": {
      "description": "Represents the messages to interact with the reports module.",
      "oneOf": [
        {
          "description": "Represents the message to be used to create a report.",
          "type": "object",
          "required": [
            "create_report"
          ],
          "properties": {
            "create_report": {
              "type": "object",
              "required": [
                "reasons_ids",
                "reporter",
                "subspace_id",
                "target"
              ],
              "properties": {
                "message": {
                  "description": "Message attached to this report.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "reasons_ids": {
                  "description": "Id of the reason this report has been created for.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "reporter": {
                  "description": "Address of the reporter.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace for which the report should be stored.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "target": {
                  "description": "Target of the report.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RawReportTarget"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Represents the message to be used when deleting a report.",
          "type": "object",
          "required": [
            "delete_report"
          ],
          "properties": {
            "delete_report": {
              "type": "object",
              "required": [
                "report_id",
                "signer",
                "subspace_id"
              ],
              "properties": {
                "report_id": {
                  "description": "Id of the report to be deleted.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "signer": {
                  "description": "Address of the user deleting the report.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace that contains the report to be deleted.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Represents the message to be used when wanting to support one reason from the module params.",
          "type": "object",
          "required": [
            "support_standard_reason"
          ],
          "properties": {
            "support_standard_reason": {
              "type": "object",
              "required": [
                "signer",
                "standard_reason_id",
                "subspace_id"
              ],
              "properties": {
                "signer": {
                  "description": "Address of the user signing the message.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "standard_reason_id": {
                  "description": "Id of the reason that should be supported.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "subspace_id": {
                  "description": "Id of the subspace for which to support the reason.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Represents the message to be used when adding a new supported reason.",
          "type": "object",
          "required": [
            "add_reason"
          ],
          "properties": {
            "add_reason": {
              "type": "object",
              "required": [
                "signer",
                "subspace_id",
                "title"
              ],
              "properties": {
                "description": {
                  "description": "Extended description of the reason and the cases it applies to.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "signer": {
                  "description": "Address of the user adding the supported reason.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace for which to add the reason.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "title": {
                  "description": "Title of the reason.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Represents the message to be used when removing an exiting reporting reason.",
          "type": "object",
          "required": [
            "remove_reason"
          ],
          "properties": {
            "remove_reason": {
              "type": "object",
              "required": [
                "reason_id",
                "signer",
                "subspace_id"
              ],
              "properties": {
                "reason_id": {
                  "description": "Id of the reason to be deleted.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "signer": {
                  "description": "Address of the user removing the supported reason.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace from which to remove the reason.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Signature": {
      "description": "Represents a signature of a payload.",
      "type": "object",
      "required": [
        "@type",
        "signature",
        "value_type"
      ],
      "properties": {
        "@type": {
          "description": "Signature type.",
          "type": "string"
        },
        "signature": {
          "description": "Signature data.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "value_type": {
          "description": "Sign mode.",
          "allOf": [
            {
              "$ref": "#/definitions/SignatureValueType"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "SignatureValueType": {
      "description": "Represents all the possible signature types.",
      "oneOf": [
        {
          "description": "Specifies an unknown signing mode and will be rejected.",
          "type": "string",
          "enum": [
            "SIGNATURE_VALUE_TYPE_UNSPECIFIED"
          ]
        },
        {
          "description": "Used when the value has been signed as a raw byte array",
          "type": "string",
          "enum": [
            "SIGNATURE_VALUE_TYPE_RAW"
          ]
        },
        {
          "description": "Used when the signed value has been encoded as a Protobuf transaction containing the owner address inside its memo field.",
          "type": "string",
          "enum": [
            "SIGNATURE_VALUE_TYPE_COSMOS_DIRECT"
          ]
        },
        {
          "description": "Used when the value has been encoded as an Amino transaction containing the owner address inside its memo field.",
          "type": "string",
          "enum": [
            "SIGNATURE_VALUE_TYPE_COSMOS_AMINO"
          ]
        },
        {
          "description": "Used when the value has been encoded following the EVM personal_sign specification.",
          "type": "string",
          "enum": [
            "SIGNATURE_VALUE_TYPE_EVM_PERSONAL_SIGN"
          ]
        }
      ]
    },
    "StakingMsg": {
      "description": "The message types of the staking module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto",
      "oneOf": [
        {
          "description": "This is translated to a [MsgDelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L81-L90). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "delegate"
          ],
          "properties": {
            "delegate": {
              "type": "object",
              "required": [
                "amount",
                "validator"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This is translated to a [MsgUndelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L112-L121). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "undelegate"
          ],
          "properties": {
            "undelegate": {
              "type": "object",
              "required": [
                "amount",
                "validator"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This is translated to a [MsgBeginRedelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L95-L105). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "redelegate"
          ],
          "properties": {
            "redelegate": {
              "type": "object",
              "required": [
                "amount",
                "dst_validator",
                "src_validator"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                },
                "dst_validator": {
                  "type": "string"
                },
                "src_validator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SubspacesMsg": {
      "description": "Represents the messages to interact with the x/subspaces module.",
      "oneOf": [
        {
          "description": "Message to create a new subspace.",
          "type": "object",
          "required": [
            "create_subspace"
          ],
          "properties": {
            "create_subspace": {
              "type": "object",
              "required": [
                "creator",
                "description",
                "name",
                "owner",
                "treasury"
              ],
              "properties": {
                "creator": {
                  "description": "Subspace creator.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "description": {
                  "description": "Subspace description.",
                  "type": "string"
                },
                "name": {
                  "description": "Subspace name.",
                  "type": "string"
                },
                "owner": {
                  "description": "Subspace owner.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "treasury": {
                  "description": "Subspace treasury address. Represents the address that will pay for the fees needed to performs application links.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to modify a subspace.",
          "type": "object",
          "required": [
            "edit_subspace"
          ],
          "properties": {
            "edit_subspace": {
              "type": "object",
              "required": [
                "description",
                "name",
                "owner",
                "signer",
                "subspace_id",
                "treasury"
              ],
              "properties": {
                "description": {
                  "description": "New subspace description.",
                  "type": "string"
                },
                "name": {
                  "description": "New subspace name.",
                  "type": "string"
                },
                "owner": {
                  "description": "New subspace owner.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "signer": {
                  "description": "Address of who wants to edit the subspace.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace to edit.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "treasury": {
                  "description": "New subspace treasury address. Represents the address that will pay for the fees needed to performs application links.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to delete a subspace.",
          "type": "object",
          "required": [
            "delete_subspace"
          ],
          "properties": {
            "delete_subspace": {
              "type": "object",
              "required": [
                "signer",
                "subspace_id"
              ],
              "properties": {
                "signer": {
                  "description": "Address of who wants delete the subspace.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace to delete.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to create a subspace section.",
          "type": "object",
          "required": [
            "create_section"
          ],
          "properties": {
            "create_section": {
              "type": "object",
              "required": [
                "creator",
                "name",
                "subspace_id"
              ],
              "properties": {
                "creator": {
                  "description": "User creating the section.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "description": {
                  "description": "Description of the section.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "name": {
                  "description": "Name of the section to be created.",
                  "type": "string"
                },
                "parent_id": {
                  "description": "Id of the parent section.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "subspace_id": {
                  "description": "Id of the subspace inside which the section will be placed.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to edit a subspace section.",
          "type": "object",
          "required": [
            "edit_section"
          ],
          "properties": {
            "edit_section": {
              "type": "object",
              "required": [
                "editor",
                "section_id",
                "subspace_id"
              ],
              "properties": {
                "description": {
                  "description": "New description of the section.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "editor": {
                  "description": "User editing the section.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "name": {
                  "description": "New name of the section.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "section_id": {
                  "description": "Id of the section to be edited.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "subspace_id": {
                  "description": "Id of the subspace inside which the section to be edited is.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to move a subspace section.",
          "type": "object",
          "required": [
            "move_section"
          ],
          "properties": {
            "move_section": {
              "type": "object",
              "required": [
                "new_parent_id",
                "section_id",
                "signer",
                "subspace_id"
              ],
              "properties": {
                "new_parent_id": {
                  "description": "Id of the new parent.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "section_id": {
                  "description": "Id of the section to be moved.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "signer": {
                  "description": "User moving the section.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace inside which the section lies.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to delete a subspace section.",
          "type": "object",
          "required": [
            "delete_section"
          ],
          "properties": {
            "delete_section": {
              "type": "object",
              "required": [
                "section_id",
                "signer",
                "subspace_id"
              ],
              "properties": {
                "section_id": {
                  "description": "Id of the section to delete.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "signer": {
                  "description": "User deleting the section.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace inside which the section to be deleted is.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to create a new user group.",
          "type": "object",
          "required": [
            "create_user_group"
          ],
          "properties": {
            "create_user_group": {
              "type": "object",
              "required": [
                "creator",
                "default_permissions",
                "name",
                "subspace_id"
              ],
              "properties": {
                "creator": {
                  "description": "Address of who wants create the user group.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "default_permissions": {
                  "description": "Permissions that all the members will inherit.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Permission"
                  }
                },
                "description": {
                  "description": "Description of the user group.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "name": {
                  "description": "Name of the user group.",
                  "type": "string"
                },
                "section_id": {
                  "description": "Id of the section inside which the group will be created.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "subspace_id": {
                  "description": "Subspace id to which the group will belong.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to modify a user group.",
          "type": "object",
          "required": [
            "edit_user_group"
          ],
          "properties": {
            "edit_user_group": {
              "type": "object",
              "required": [
                "group_id",
                "signer",
                "subspace_id"
              ],
              "properties": {
                "description": {
                  "description": "New user group description.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "group_id": {
                  "description": "Id of the user group to edit.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "name": {
                  "description": "New user group name.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "signer": {
                  "description": "Address of who wants edit the user group.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Subspace id to which the user group belongs.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to move a user group to from a section to another.",
          "type": "object",
          "required": [
            "move_user_group"
          ],
          "properties": {
            "move_user_group": {
              "type": "object",
              "required": [
                "group_id",
                "new_section_id",
                "signer",
                "subspace_id"
              ],
              "properties": {
                "group_id": {
                  "description": "Id of the group to be moved.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "new_section_id": {
                  "description": "Id of the new section where to move the group.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "signer": {
                  "description": "Address of who wants move the user group.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Id of the subspace inside which the group to move is.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to update the permissions that the group members will inherit.",
          "type": "object",
          "required": [
            "set_user_group_permissions"
          ],
          "properties": {
            "set_user_group_permissions": {
              "type": "object",
              "required": [
                "group_id",
                "permissions",
                "signer",
                "subspace_id"
              ],
              "properties": {
                "group_id": {
                  "description": "Id of the group of interest.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "permissions": {
                  "description": "The permissions that will be set for the user group.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Permission"
                  }
                },
                "signer": {
                  "description": "Address of who wants update the user group permissions.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Subspace id to which the user group belongs.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to delete a user group.",
          "type": "object",
          "required": [
            "delete_user_group"
          ],
          "properties": {
            "delete_user_group": {
              "type": "object",
              "required": [
                "group_id",
                "signer",
                "subspace_id"
              ],
              "properties": {
                "group_id": {
                  "description": "Id of the group to delete.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "signer": {
                  "description": "Address of who wants delete the user group.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Subspace id to which the group belongs.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to add a new user to a group.",
          "type": "object",
          "required": [
            "add_user_to_user_group"
          ],
          "properties": {
            "add_user_to_user_group": {
              "type": "object",
              "required": [
                "group_id",
                "signer",
                "subspace_id",
                "user"
              ],
              "properties": {
                "group_id": {
                  "description": "Id of the group to which will be added the user.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "signer": {
                  "description": "Address of who wants add a new user to the group.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Subspace id to which belong the group.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "user": {
                  "description": "Address of the user to add to the group.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message to remove a user from a group.",
          "type": "object",
          "required": [
            "remove_user_from_user_group"
          ],
          "properties": {
            "remove_user_from_user_group": {
              "type": "object",
              "required": [
                "group_id",
                "signer",
                "subspace_id",
                "user"
              ],
              "properties": {
                "group_id": {
                  "description": "Id of the group from where will be removed the user.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "signer": {
                  "description": "Address of who wants remove the user from the group.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Subspace id to which the group belongs.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "user": {
                  "description": "Address of the user that will be removed.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sets the permissions that an user have inside a subspace.",
          "type": "object",
          "required": [
            "set_user_permissions"
          ],
          "properties": {
            "set_user_permissions": {
              "type": "object",
              "required": [
                "permissions",
                "section_id",
                "signer",
                "subspace_id",
                "user"
              ],
              "properties": {
                "permissions": {
                  "description": "The new user's permissions.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Permission"
                  }
                },
                "section_id": {
                  "description": "Id of the section for which to set the permissions.",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "signer": {
                  "description": "Address of who wants update the user's permissions.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "subspace_id": {
                  "description": "Subspace id to which the user belongs.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    }
                  ]
                },
                "user": {
                  "description": "Address of the user.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TextTagEntity": {
      "description": "Represents a generic tag.",
      "type": "object",
      "required": [
        "end",
        "start",
        "tag"
      ],
      "properties": {
        "end": {
          "description": "Index of the character inside the text at which the tag ends.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "start": {
          "description": "Index of the character inside the text at which the tag starts.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "tag": {
          "description": "Tag reference (user address, hashtag value, etc).",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "UrlEntity": {
      "description": "Contains the details of a generic URL.",
      "type": "object",
      "required": [
        "display_url",
        "end",
        "start",
        "url"
      ],
      "properties": {
        "display_url": {
          "description": "Display value of the URL.",
          "type": "string"
        },
        "end": {
          "description": "Index of the character inside the text at which the URL ends.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "start": {
          "description": "Index of the character inside the text at which the URL starts.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "url": {
          "description": "Value of the URL where the user should be redirected to.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "WasmMsg": {
      "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
      "oneOf": [
        {
          "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "execute"
          ],
          "properties": {
            "execute": {
              "type": "object",
              "required": [
                "contract_addr",
                "funds",
                "msg"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "funds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "msg": {
                  "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.16.0-alpha1/x/wasm/internal/types/tx.proto#L47-L61). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "instantiate"
          ],
          "properties": {
            "instantiate": {
              "type": "object",
              "required": [
                "code_id",
                "funds",
                "label",
                "msg"
              ],
              "properties": {
                "admin": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "funds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "label": {
                  "description": "A human-readbale label for the contract",
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "migrate"
          ],
          "properties": {
            "migrate": {
              "type": "object",
              "required": [
                "contract_addr",
                "msg",
                "new_code_id"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                },
                "new_code_id": {
                  "description": "the code_id of the new logic to place in the given contract",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
          "type": "object",
          "required": [
            "update_admin"
          ],
          "properties": {
            "update_admin": {
              "type": "object",
              "required": [
                "admin",
                "contract_addr"
              ],
              "properties": {
                "admin": {
                  "type": "string"
                },
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
          "type": "object",
          "required": [
            "clear_admin"
          ],
          "properties": {
            "clear_admin": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
